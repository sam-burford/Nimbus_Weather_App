{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WeatherApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  /**\r\n   * Gets the stored location last used by the Weather API Service.\r\n   * @returns\r\n   */\n  getLocation() {\n    return WeatherApiService.location;\n  }\n  /**\r\n   * Updates the location for the Weather API Service.\r\n   * @param location The new location.\r\n   */\n  setLocation(location) {\n    WeatherApiService.location = location;\n  }\n  /**\r\n   * Retrieves a WeatherResponse from the back-end API via a GET request.\r\n   * @author Sam Burford\r\n   */\n  getWeather() {\n    return this.http.get(\"https://localhost:7185/api/weather\").subscribe(res => {\n      console.log(res);\n      if (res) WeatherApiService._weatherUpdates.next(res);\n    });\n  }\n}\nWeatherApiService._weatherUpdates = new Subject();\n/**This is a Observable which receives posts whenever the weather data is updated. */\nWeatherApiService.weatherUpdates = WeatherApiService._weatherUpdates.asObservable();\n/** Stores the location for the Weather API. */\nWeatherApiService.location = \"London\";\nWeatherApiService.ɵfac = function WeatherApiService_Factory(t) {\n  return new (t || WeatherApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nWeatherApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WeatherApiService,\n  factory: WeatherApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,MAAM;;;AAK9B,OAAM,MAAOC,iBAAiB;EAU5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAExC;;;;EAIAC,WAAW;IAET,OAAOH,iBAAiB,CAACI,QAAQ;EACnC;EAEA;;;;EAIAC,WAAW,CAACD,QAAgB;IAE1BJ,iBAAiB,CAACI,QAAQ,GAAGA,QAAQ;EACvC;EAEA;;;;EAIAE,UAAU;IAER,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAC,oCAAoC,CAAC,CAACC,SAAS,CAAEC,GAAG,IAAI;MAE3EC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChB,IAAIA,GAAG,EACLT,iBAAiB,CAACY,eAAe,CAACC,IAAI,CAACJ,GAAG,CAAC;IAC/C,CAAC,CAAC;EACJ;;AA1CWT,iBAAiB,CAGXY,eAAe,GAAG,IAAIb,OAAO,EAAO;AACrD;AAJWC,iBAAiB,CAKdc,cAAc,GAAGd,iBAAiB,CAACY,eAAe,CAACG,YAAY,EAAE;AAE/E;AAPWf,iBAAiB,CAQXI,QAAQ,GAAW,QAAQ;AARjCJ,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAgB,SAAjBhB,iBAAiB;EAAAiB,YAFhB;AAAM","names":["Subject","WeatherApiService","constructor","http","getLocation","location","setLocation","getWeather","get","subscribe","res","console","log","_weatherUpdates","next","weatherUpdates","asObservable","factory","providedIn"],"sourceRoot":"","sources":["F:\\Dev\\Web Dev Projects\\ASP.NET\\Nimbus_Weather_App\\Nimbus_Weather_App\\Nimbus_Weather_App_Solution\\Nimbus_Weather_App\\ClientApp\\src\\app\\services\\weather-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherApiService\r\n{\n\n  protected static _weatherUpdates = new Subject<any>();\n  /**This is a Observable which receives posts whenever the weather data is updated. */\n  public static weatherUpdates = WeatherApiService._weatherUpdates.asObservable();\n\n  /** Stores the location for the Weather API. */\n  protected static location: string = \"London\";\n\n  constructor(private http: HttpClient) { }\n\n  /**\r\n   * Gets the stored location last used by the Weather API Service. \n   * @returns\r\n   */\r\n  getLocation(): string\n  {\n    return WeatherApiService.location;\r\n  }\n\n  /**\r\n   * Updates the location for the Weather API Service. \n   * @param location The new location. \r\n   */\r\n  setLocation(location: string): void\n  {\n    WeatherApiService.location = location;\r\n  }\n\n  /**\r\n   * Retrieves a WeatherResponse from the back-end API via a GET request.\r\n   * @author Sam Burford\r\n   */\r\n  getWeather(): any\n  {\n    return this.http.get(\"https://localhost:7185/api/weather\").subscribe((res) =>\r\n    {\r\n      console.log(res);\r\n      if (res)\r\n        WeatherApiService._weatherUpdates.next(res);\r\n    });\r\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}